// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  brighten: (where?: BrightenWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  brighten: (where: BrightenWhereUniqueInput) => BrightenPromise;
  brightens: (
    args?: {
      where?: BrightenWhereInput;
      orderBy?: BrightenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Brighten>;
  brightensConnection: (
    args?: {
      where?: BrightenWhereInput;
      orderBy?: BrightenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BrightenConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBrighten: (data: BrightenCreateInput) => BrightenPromise;
  updateBrighten: (
    args: { data: BrightenUpdateInput; where: BrightenWhereUniqueInput }
  ) => BrightenPromise;
  updateManyBrightens: (
    args: { data: BrightenUpdateManyMutationInput; where?: BrightenWhereInput }
  ) => BatchPayloadPromise;
  upsertBrighten: (
    args: {
      where: BrightenWhereUniqueInput;
      create: BrightenCreateInput;
      update: BrightenUpdateInput;
    }
  ) => BrightenPromise;
  deleteBrighten: (where: BrightenWhereUniqueInput) => BrightenPromise;
  deleteManyBrightens: (where?: BrightenWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  brighten: (
    where?: BrightenSubscriptionWhereInput
  ) => BrightenSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BrightenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "text_ASC"
  | "text_DESC"
  | "revealed_ASC"
  | "revealed_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "instagram_ASC"
  | "instagram_DESC"
  | "email_ASC"
  | "email_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BrightenWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BrightenWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  sender?: UserWhereInput;
  receiver?: UserWhereInput;
  revealed?: Boolean;
  revealed_not?: Boolean;
  AND?: BrightenWhereInput[] | BrightenWhereInput;
  OR?: BrightenWhereInput[] | BrightenWhereInput;
  NOT?: BrightenWhereInput[] | BrightenWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  instagram?: String;
  instagram_not?: String;
  instagram_in?: String[] | String;
  instagram_not_in?: String[] | String;
  instagram_lt?: String;
  instagram_lte?: String;
  instagram_gt?: String;
  instagram_gte?: String;
  instagram_contains?: String;
  instagram_not_contains?: String;
  instagram_starts_with?: String;
  instagram_not_starts_with?: String;
  instagram_ends_with?: String;
  instagram_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  sentBrightens_every?: BrightenWhereInput;
  sentBrightens_some?: BrightenWhereInput;
  sentBrightens_none?: BrightenWhereInput;
  receivedBrightens_every?: BrightenWhereInput;
  receivedBrightens_some?: BrightenWhereInput;
  receivedBrightens_none?: BrightenWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  instagram?: String;
  email?: String;
}>;

export interface BrightenCreateInput {
  text: String;
  sender: UserCreateOneWithoutSentBrightensInput;
  receiver: UserCreateOneWithoutReceivedBrightensInput;
  revealed?: Boolean;
}

export interface UserCreateOneWithoutSentBrightensInput {
  create?: UserCreateWithoutSentBrightensInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutSentBrightensInput {
  name: String;
  instagram?: String;
  email?: String;
  receivedBrightens?: BrightenCreateManyWithoutReceiverInput;
}

export interface BrightenCreateManyWithoutReceiverInput {
  create?:
    | BrightenCreateWithoutReceiverInput[]
    | BrightenCreateWithoutReceiverInput;
  connect?: BrightenWhereUniqueInput[] | BrightenWhereUniqueInput;
}

export interface BrightenCreateWithoutReceiverInput {
  text: String;
  sender: UserCreateOneWithoutSentBrightensInput;
  revealed?: Boolean;
}

export interface UserCreateOneWithoutReceivedBrightensInput {
  create?: UserCreateWithoutReceivedBrightensInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutReceivedBrightensInput {
  name: String;
  instagram?: String;
  email?: String;
  sentBrightens?: BrightenCreateManyWithoutSenderInput;
}

export interface BrightenCreateManyWithoutSenderInput {
  create?:
    | BrightenCreateWithoutSenderInput[]
    | BrightenCreateWithoutSenderInput;
  connect?: BrightenWhereUniqueInput[] | BrightenWhereUniqueInput;
}

export interface BrightenCreateWithoutSenderInput {
  text: String;
  receiver: UserCreateOneWithoutReceivedBrightensInput;
  revealed?: Boolean;
}

export interface BrightenUpdateInput {
  text?: String;
  sender?: UserUpdateOneRequiredWithoutSentBrightensInput;
  receiver?: UserUpdateOneRequiredWithoutReceivedBrightensInput;
  revealed?: Boolean;
}

export interface UserUpdateOneRequiredWithoutSentBrightensInput {
  create?: UserCreateWithoutSentBrightensInput;
  update?: UserUpdateWithoutSentBrightensDataInput;
  upsert?: UserUpsertWithoutSentBrightensInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutSentBrightensDataInput {
  name?: String;
  instagram?: String;
  email?: String;
  receivedBrightens?: BrightenUpdateManyWithoutReceiverInput;
}

export interface BrightenUpdateManyWithoutReceiverInput {
  create?:
    | BrightenCreateWithoutReceiverInput[]
    | BrightenCreateWithoutReceiverInput;
  delete?: BrightenWhereUniqueInput[] | BrightenWhereUniqueInput;
  connect?: BrightenWhereUniqueInput[] | BrightenWhereUniqueInput;
  disconnect?: BrightenWhereUniqueInput[] | BrightenWhereUniqueInput;
  update?:
    | BrightenUpdateWithWhereUniqueWithoutReceiverInput[]
    | BrightenUpdateWithWhereUniqueWithoutReceiverInput;
  upsert?:
    | BrightenUpsertWithWhereUniqueWithoutReceiverInput[]
    | BrightenUpsertWithWhereUniqueWithoutReceiverInput;
  deleteMany?: BrightenScalarWhereInput[] | BrightenScalarWhereInput;
  updateMany?:
    | BrightenUpdateManyWithWhereNestedInput[]
    | BrightenUpdateManyWithWhereNestedInput;
}

export interface BrightenUpdateWithWhereUniqueWithoutReceiverInput {
  where: BrightenWhereUniqueInput;
  data: BrightenUpdateWithoutReceiverDataInput;
}

export interface BrightenUpdateWithoutReceiverDataInput {
  text?: String;
  sender?: UserUpdateOneRequiredWithoutSentBrightensInput;
  revealed?: Boolean;
}

export interface BrightenUpsertWithWhereUniqueWithoutReceiverInput {
  where: BrightenWhereUniqueInput;
  update: BrightenUpdateWithoutReceiverDataInput;
  create: BrightenCreateWithoutReceiverInput;
}

export interface BrightenScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  revealed?: Boolean;
  revealed_not?: Boolean;
  AND?: BrightenScalarWhereInput[] | BrightenScalarWhereInput;
  OR?: BrightenScalarWhereInput[] | BrightenScalarWhereInput;
  NOT?: BrightenScalarWhereInput[] | BrightenScalarWhereInput;
}

export interface BrightenUpdateManyWithWhereNestedInput {
  where: BrightenScalarWhereInput;
  data: BrightenUpdateManyDataInput;
}

export interface BrightenUpdateManyDataInput {
  text?: String;
  revealed?: Boolean;
}

export interface UserUpsertWithoutSentBrightensInput {
  update: UserUpdateWithoutSentBrightensDataInput;
  create: UserCreateWithoutSentBrightensInput;
}

export interface UserUpdateOneRequiredWithoutReceivedBrightensInput {
  create?: UserCreateWithoutReceivedBrightensInput;
  update?: UserUpdateWithoutReceivedBrightensDataInput;
  upsert?: UserUpsertWithoutReceivedBrightensInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutReceivedBrightensDataInput {
  name?: String;
  instagram?: String;
  email?: String;
  sentBrightens?: BrightenUpdateManyWithoutSenderInput;
}

export interface BrightenUpdateManyWithoutSenderInput {
  create?:
    | BrightenCreateWithoutSenderInput[]
    | BrightenCreateWithoutSenderInput;
  delete?: BrightenWhereUniqueInput[] | BrightenWhereUniqueInput;
  connect?: BrightenWhereUniqueInput[] | BrightenWhereUniqueInput;
  disconnect?: BrightenWhereUniqueInput[] | BrightenWhereUniqueInput;
  update?:
    | BrightenUpdateWithWhereUniqueWithoutSenderInput[]
    | BrightenUpdateWithWhereUniqueWithoutSenderInput;
  upsert?:
    | BrightenUpsertWithWhereUniqueWithoutSenderInput[]
    | BrightenUpsertWithWhereUniqueWithoutSenderInput;
  deleteMany?: BrightenScalarWhereInput[] | BrightenScalarWhereInput;
  updateMany?:
    | BrightenUpdateManyWithWhereNestedInput[]
    | BrightenUpdateManyWithWhereNestedInput;
}

export interface BrightenUpdateWithWhereUniqueWithoutSenderInput {
  where: BrightenWhereUniqueInput;
  data: BrightenUpdateWithoutSenderDataInput;
}

export interface BrightenUpdateWithoutSenderDataInput {
  text?: String;
  receiver?: UserUpdateOneRequiredWithoutReceivedBrightensInput;
  revealed?: Boolean;
}

export interface BrightenUpsertWithWhereUniqueWithoutSenderInput {
  where: BrightenWhereUniqueInput;
  update: BrightenUpdateWithoutSenderDataInput;
  create: BrightenCreateWithoutSenderInput;
}

export interface UserUpsertWithoutReceivedBrightensInput {
  update: UserUpdateWithoutReceivedBrightensDataInput;
  create: UserCreateWithoutReceivedBrightensInput;
}

export interface BrightenUpdateManyMutationInput {
  text?: String;
  revealed?: Boolean;
}

export interface UserCreateInput {
  name: String;
  instagram?: String;
  email?: String;
  sentBrightens?: BrightenCreateManyWithoutSenderInput;
  receivedBrightens?: BrightenCreateManyWithoutReceiverInput;
}

export interface UserUpdateInput {
  name?: String;
  instagram?: String;
  email?: String;
  sentBrightens?: BrightenUpdateManyWithoutSenderInput;
  receivedBrightens?: BrightenUpdateManyWithoutReceiverInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  instagram?: String;
  email?: String;
}

export interface BrightenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BrightenWhereInput;
  AND?: BrightenSubscriptionWhereInput[] | BrightenSubscriptionWhereInput;
  OR?: BrightenSubscriptionWhereInput[] | BrightenSubscriptionWhereInput;
  NOT?: BrightenSubscriptionWhereInput[] | BrightenSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Brighten {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
  revealed: Boolean;
}

export interface BrightenPromise extends Promise<Brighten>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  sender: <T = UserPromise>() => T;
  receiver: <T = UserPromise>() => T;
  revealed: () => Promise<Boolean>;
}

export interface BrightenSubscription
  extends Promise<AsyncIterator<Brighten>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  sender: <T = UserSubscription>() => T;
  receiver: <T = UserSubscription>() => T;
  revealed: () => Promise<AsyncIterator<Boolean>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  instagram?: String;
  email?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  instagram: () => Promise<String>;
  email: () => Promise<String>;
  sentBrightens: <T = FragmentableArray<Brighten>>(
    args?: {
      where?: BrightenWhereInput;
      orderBy?: BrightenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  receivedBrightens: <T = FragmentableArray<Brighten>>(
    args?: {
      where?: BrightenWhereInput;
      orderBy?: BrightenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  instagram: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  sentBrightens: <T = Promise<AsyncIterator<BrightenSubscription>>>(
    args?: {
      where?: BrightenWhereInput;
      orderBy?: BrightenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  receivedBrightens: <T = Promise<AsyncIterator<BrightenSubscription>>>(
    args?: {
      where?: BrightenWhereInput;
      orderBy?: BrightenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BrightenConnection {
  pageInfo: PageInfo;
  edges: BrightenEdge[];
}

export interface BrightenConnectionPromise
  extends Promise<BrightenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BrightenEdge>>() => T;
  aggregate: <T = AggregateBrightenPromise>() => T;
}

export interface BrightenConnectionSubscription
  extends Promise<AsyncIterator<BrightenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BrightenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBrightenSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BrightenEdge {
  node: Brighten;
  cursor: String;
}

export interface BrightenEdgePromise
  extends Promise<BrightenEdge>,
    Fragmentable {
  node: <T = BrightenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BrightenEdgeSubscription
  extends Promise<AsyncIterator<BrightenEdge>>,
    Fragmentable {
  node: <T = BrightenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBrighten {
  count: Int;
}

export interface AggregateBrightenPromise
  extends Promise<AggregateBrighten>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBrightenSubscription
  extends Promise<AsyncIterator<AggregateBrighten>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BrightenSubscriptionPayload {
  mutation: MutationType;
  node: Brighten;
  updatedFields: String[];
  previousValues: BrightenPreviousValues;
}

export interface BrightenSubscriptionPayloadPromise
  extends Promise<BrightenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BrightenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BrightenPreviousValuesPromise>() => T;
}

export interface BrightenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BrightenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BrightenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BrightenPreviousValuesSubscription>() => T;
}

export interface BrightenPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
  revealed: Boolean;
}

export interface BrightenPreviousValuesPromise
  extends Promise<BrightenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  revealed: () => Promise<Boolean>;
}

export interface BrightenPreviousValuesSubscription
  extends Promise<AsyncIterator<BrightenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  revealed: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  instagram?: String;
  email?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  instagram: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  instagram: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Brighten",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
